//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: et_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate ETServiceClient, then call methods of this protocol to make API calls.
internal protocol ETServiceClientProtocol: GRPCClient {
    var interceptors: ETServiceClientInterceptorFactoryProtocol? { get }
    
    func loginWithGoogle(
        _ request: LoginWithGoogle.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<LoginWithGoogle.Request, LoginWithGoogle.Response>
    
    func loginDashboard(
        _ request: LoginDashboard.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<LoginDashboard.Request, LoginDashboard.Response>
    
    func bindUserToCampaign(
        _ request: BindUserToCampaign.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<BindUserToCampaign.Request, BindUserToCampaign.Response>
    
    func retrieveParticipants(
        _ request: RetrieveParticipants.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveParticipants.Request, RetrieveParticipants.Response>
    
    func retrieveParticipantStats(
        _ request: RetrieveParticipantStats.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveParticipantStats.Request, RetrieveParticipantStats.Response>
    
    func registerCampaign(
        _ request: RegisterCampaign.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RegisterCampaign.Request, RegisterCampaign.Response>
    
    func deleteCampaign(
        _ request: DeleteCampaign.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<DeleteCampaign.Request, DeleteCampaign.Response>
    
    func retrieveCampaigns(
        _ request: RetrieveCampaigns.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveCampaigns.Request, RetrieveCampaigns.Response>
    
    func retrieveCampaign(
        _ request: RetrieveCampaign.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveCampaign.Request, RetrieveCampaign.Response>
    
    func bindDataSource(
        _ request: BindDataSource.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<BindDataSource.Request, BindDataSource.Response>
    
    func retrieveDataSources(
        _ request: RetrieveDataSources.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveDataSources.Request, RetrieveDataSources.Response>
    
    func submitDataRecord(
        _ request: SubmitDataRecord.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<SubmitDataRecord.Request, SubmitDataRecord.Response>
    
    func submitDataRecords(
        _ request: SubmitDataRecords.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<SubmitDataRecords.Request, SubmitDataRecords.Response>
    
    func retrieveKNextDataRecords(
        _ request: RetrieveKNextDataRecords.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveKNextDataRecords.Request, RetrieveKNextDataRecords.Response>
    
    func retrieveFilteredDataRecords(
        _ request: RetrieveFilteredDataRecords.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveFilteredDataRecords.Request, RetrieveFilteredDataRecords.Response>
    
    func downloadDumpfile(
        _ request: DownloadDumpfile.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<DownloadDumpfile.Request, DownloadDumpfile.Response>
    
    func submitHeartbeat(
        _ request: SubmitHeartbeat.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<SubmitHeartbeat.Request, SubmitHeartbeat.Response>
    
    func submitDirectMessage(
        _ request: SubmitDirectMessage.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<SubmitDirectMessage.Request, SubmitDirectMessage.Response>
    
    func retrieveUnreadDirectMessages(
        _ request: RetrieveUnreadDirectMessages.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveUnreadDirectMessages.Request, RetrieveUnreadDirectMessages.Response>
    
    func retrieveUnreadNotifications(
        _ request: RetrieveUnreadNotifications.Request,
        callOptions: CallOptions?
    ) -> UnaryCall<RetrieveUnreadNotifications.Request, RetrieveUnreadNotifications.Response>
}

extension ETServiceClientProtocol {
    
    /// user management module
    ///
    /// - Parameters:
    ///   - request: Request to send to loginWithGoogle.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func loginWithGoogle(
        _ request: LoginWithGoogle.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<LoginWithGoogle.Request, LoginWithGoogle.Response> {
        return self.makeUnaryCall(
            path: "/ETService/loginWithGoogle",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeloginWithGoogleInterceptors() ?? []
        )
    }
    
    /// Unary call to loginDashboard
    ///
    /// - Parameters:
    ///   - request: Request to send to loginDashboard.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func loginDashboard(
        _ request: LoginDashboard.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<LoginDashboard.Request, LoginDashboard.Response> {
        return self.makeUnaryCall(
            path: "/ETService/loginDashboard",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeloginDashboardInterceptors() ?? []
        )
    }
    
    /// Unary call to bindUserToCampaign
    ///
    /// - Parameters:
    ///   - request: Request to send to bindUserToCampaign.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func bindUserToCampaign(
        _ request: BindUserToCampaign.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<BindUserToCampaign.Request, BindUserToCampaign.Response> {
        return self.makeUnaryCall(
            path: "/ETService/bindUserToCampaign",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makebindUserToCampaignInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveParticipants
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveParticipants.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveParticipants(
        _ request: RetrieveParticipants.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveParticipants.Request, RetrieveParticipants.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveParticipants",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveParticipantsInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveParticipantStats
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveParticipantStats.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveParticipantStats(
        _ request: RetrieveParticipantStats.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveParticipantStats.Request, RetrieveParticipantStats.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveParticipantStats",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveParticipantStatsInterceptors() ?? []
        )
    }
    
    /// campaign management module
    ///
    /// - Parameters:
    ///   - request: Request to send to registerCampaign.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func registerCampaign(
        _ request: RegisterCampaign.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RegisterCampaign.Request, RegisterCampaign.Response> {
        return self.makeUnaryCall(
            path: "/ETService/registerCampaign",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeregisterCampaignInterceptors() ?? []
        )
    }
    
    /// Unary call to deleteCampaign
    ///
    /// - Parameters:
    ///   - request: Request to send to deleteCampaign.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func deleteCampaign(
        _ request: DeleteCampaign.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DeleteCampaign.Request, DeleteCampaign.Response> {
        return self.makeUnaryCall(
            path: "/ETService/deleteCampaign",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makedeleteCampaignInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveCampaigns
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveCampaigns.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveCampaigns(
        _ request: RetrieveCampaigns.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveCampaigns.Request, RetrieveCampaigns.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveCampaigns",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveCampaignsInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveCampaign
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveCampaign.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveCampaign(
        _ request: RetrieveCampaign.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveCampaign.Request, RetrieveCampaign.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveCampaign",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveCampaignInterceptors() ?? []
        )
    }
    
    /// data source management module
    ///
    /// - Parameters:
    ///   - request: Request to send to bindDataSource.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func bindDataSource(
        _ request: BindDataSource.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<BindDataSource.Request, BindDataSource.Response> {
        return self.makeUnaryCall(
            path: "/ETService/bindDataSource",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makebindDataSourceInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveDataSources
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveDataSources.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveDataSources(
        _ request: RetrieveDataSources.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveDataSources.Request, RetrieveDataSources.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveDataSources",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveDataSourcesInterceptors() ?? []
        )
    }
    
    /// data management module
    ///
    /// - Parameters:
    ///   - request: Request to send to submitDataRecord.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func submitDataRecord(
        _ request: SubmitDataRecord.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<SubmitDataRecord.Request, SubmitDataRecord.Response> {
        return self.makeUnaryCall(
            path: "/ETService/submitDataRecord",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubmitDataRecordInterceptors() ?? []
        )
    }
    
    /// Unary call to submitDataRecords
    ///
    /// - Parameters:
    ///   - request: Request to send to submitDataRecords.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func submitDataRecords(
        _ request: SubmitDataRecords.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<SubmitDataRecords.Request, SubmitDataRecords.Response> {
        return self.makeUnaryCall(
            path: "/ETService/submitDataRecords",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubmitDataRecordsInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveKNextDataRecords
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveKNextDataRecords.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveKNextDataRecords(
        _ request: RetrieveKNextDataRecords.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveKNextDataRecords.Request, RetrieveKNextDataRecords.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveKNextDataRecords",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveKNextDataRecordsInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveFilteredDataRecords
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveFilteredDataRecords.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveFilteredDataRecords(
        _ request: RetrieveFilteredDataRecords.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveFilteredDataRecords.Request, RetrieveFilteredDataRecords.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveFilteredDataRecords",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveFilteredDataRecordsInterceptors() ?? []
        )
    }
    
    /// Unary call to downloadDumpfile
    ///
    /// - Parameters:
    ///   - request: Request to send to downloadDumpfile.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func downloadDumpfile(
        _ request: DownloadDumpfile.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DownloadDumpfile.Request, DownloadDumpfile.Response> {
        return self.makeUnaryCall(
            path: "/ETService/downloadDumpfile",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makedownloadDumpfileInterceptors() ?? []
        )
    }
    
    /// statistics module
    ///
    /// - Parameters:
    ///   - request: Request to send to submitHeartbeat.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func submitHeartbeat(
        _ request: SubmitHeartbeat.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<SubmitHeartbeat.Request, SubmitHeartbeat.Response> {
        return self.makeUnaryCall(
            path: "/ETService/submitHeartbeat",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubmitHeartbeatInterceptors() ?? []
        )
    }
    
    /// communication management module
    ///
    /// - Parameters:
    ///   - request: Request to send to submitDirectMessage.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func submitDirectMessage(
        _ request: SubmitDirectMessage.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<SubmitDirectMessage.Request, SubmitDirectMessage.Response> {
        return self.makeUnaryCall(
            path: "/ETService/submitDirectMessage",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubmitDirectMessageInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveUnreadDirectMessages
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveUnreadDirectMessages.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveUnreadDirectMessages(
        _ request: RetrieveUnreadDirectMessages.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveUnreadDirectMessages.Request, RetrieveUnreadDirectMessages.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveUnreadDirectMessages",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveUnreadDirectMessagesInterceptors() ?? []
        )
    }
    
    /// Unary call to retrieveUnreadNotifications
    ///
    /// - Parameters:
    ///   - request: Request to send to retrieveUnreadNotifications.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func retrieveUnreadNotifications(
        _ request: RetrieveUnreadNotifications.Request,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<RetrieveUnreadNotifications.Request, RetrieveUnreadNotifications.Response> {
        return self.makeUnaryCall(
            path: "/ETService/retrieveUnreadNotifications",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makeretrieveUnreadNotificationsInterceptors() ?? []
        )
    }
}

internal protocol ETServiceClientInterceptorFactoryProtocol {
    
    /// - Returns: Interceptors to use when invoking 'loginWithGoogle'.
    func makeloginWithGoogleInterceptors() -> [ClientInterceptor<LoginWithGoogle.Request, LoginWithGoogle.Response>]
    
    /// - Returns: Interceptors to use when invoking 'loginDashboard'.
    func makeloginDashboardInterceptors() -> [ClientInterceptor<LoginDashboard.Request, LoginDashboard.Response>]
    
    /// - Returns: Interceptors to use when invoking 'bindUserToCampaign'.
    func makebindUserToCampaignInterceptors() -> [ClientInterceptor<BindUserToCampaign.Request, BindUserToCampaign.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveParticipants'.
    func makeretrieveParticipantsInterceptors() -> [ClientInterceptor<RetrieveParticipants.Request, RetrieveParticipants.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveParticipantStats'.
    func makeretrieveParticipantStatsInterceptors() -> [ClientInterceptor<RetrieveParticipantStats.Request, RetrieveParticipantStats.Response>]
    
    /// - Returns: Interceptors to use when invoking 'registerCampaign'.
    func makeregisterCampaignInterceptors() -> [ClientInterceptor<RegisterCampaign.Request, RegisterCampaign.Response>]
    
    /// - Returns: Interceptors to use when invoking 'deleteCampaign'.
    func makedeleteCampaignInterceptors() -> [ClientInterceptor<DeleteCampaign.Request, DeleteCampaign.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveCampaigns'.
    func makeretrieveCampaignsInterceptors() -> [ClientInterceptor<RetrieveCampaigns.Request, RetrieveCampaigns.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveCampaign'.
    func makeretrieveCampaignInterceptors() -> [ClientInterceptor<RetrieveCampaign.Request, RetrieveCampaign.Response>]
    
    /// - Returns: Interceptors to use when invoking 'bindDataSource'.
    func makebindDataSourceInterceptors() -> [ClientInterceptor<BindDataSource.Request, BindDataSource.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveDataSources'.
    func makeretrieveDataSourcesInterceptors() -> [ClientInterceptor<RetrieveDataSources.Request, RetrieveDataSources.Response>]
    
    /// - Returns: Interceptors to use when invoking 'submitDataRecord'.
    func makesubmitDataRecordInterceptors() -> [ClientInterceptor<SubmitDataRecord.Request, SubmitDataRecord.Response>]
    
    /// - Returns: Interceptors to use when invoking 'submitDataRecords'.
    func makesubmitDataRecordsInterceptors() -> [ClientInterceptor<SubmitDataRecords.Request, SubmitDataRecords.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveKNextDataRecords'.
    func makeretrieveKNextDataRecordsInterceptors() -> [ClientInterceptor<RetrieveKNextDataRecords.Request, RetrieveKNextDataRecords.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveFilteredDataRecords'.
    func makeretrieveFilteredDataRecordsInterceptors() -> [ClientInterceptor<RetrieveFilteredDataRecords.Request, RetrieveFilteredDataRecords.Response>]
    
    /// - Returns: Interceptors to use when invoking 'downloadDumpfile'.
    func makedownloadDumpfileInterceptors() -> [ClientInterceptor<DownloadDumpfile.Request, DownloadDumpfile.Response>]
    
    /// - Returns: Interceptors to use when invoking 'submitHeartbeat'.
    func makesubmitHeartbeatInterceptors() -> [ClientInterceptor<SubmitHeartbeat.Request, SubmitHeartbeat.Response>]
    
    /// - Returns: Interceptors to use when invoking 'submitDirectMessage'.
    func makesubmitDirectMessageInterceptors() -> [ClientInterceptor<SubmitDirectMessage.Request, SubmitDirectMessage.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveUnreadDirectMessages'.
    func makeretrieveUnreadDirectMessagesInterceptors() -> [ClientInterceptor<RetrieveUnreadDirectMessages.Request, RetrieveUnreadDirectMessages.Response>]
    
    /// - Returns: Interceptors to use when invoking 'retrieveUnreadNotifications'.
    func makeretrieveUnreadNotificationsInterceptors() -> [ClientInterceptor<RetrieveUnreadNotifications.Request, RetrieveUnreadNotifications.Response>]
}

internal final class ETServiceClient: ETServiceClientProtocol {
    internal let channel: GRPCChannel
    internal var defaultCallOptions: CallOptions
    internal var interceptors: ETServiceClientInterceptorFactoryProtocol?
    
    /// Creates a client for the ETService service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    internal init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: ETServiceClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol ETServiceProvider: CallHandlerProvider {
    var interceptors: ETServiceServerInterceptorFactoryProtocol? { get }
    
    /// user management module
    func loginWithGoogle(request: LoginWithGoogle.Request, context: StatusOnlyCallContext) -> EventLoopFuture<LoginWithGoogle.Response>
    
    func loginDashboard(request: LoginDashboard.Request, context: StatusOnlyCallContext) -> EventLoopFuture<LoginDashboard.Response>
    
    func bindUserToCampaign(request: BindUserToCampaign.Request, context: StatusOnlyCallContext) -> EventLoopFuture<BindUserToCampaign.Response>
    
    func retrieveParticipants(request: RetrieveParticipants.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveParticipants.Response>
    
    func retrieveParticipantStats(request: RetrieveParticipantStats.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveParticipantStats.Response>
    
    /// campaign management module
    func registerCampaign(request: RegisterCampaign.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RegisterCampaign.Response>
    
    func deleteCampaign(request: DeleteCampaign.Request, context: StatusOnlyCallContext) -> EventLoopFuture<DeleteCampaign.Response>
    
    func retrieveCampaigns(request: RetrieveCampaigns.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveCampaigns.Response>
    
    func retrieveCampaign(request: RetrieveCampaign.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveCampaign.Response>
    
    /// data source management module
    func bindDataSource(request: BindDataSource.Request, context: StatusOnlyCallContext) -> EventLoopFuture<BindDataSource.Response>
    
    func retrieveDataSources(request: RetrieveDataSources.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveDataSources.Response>
    
    /// data management module
    func submitDataRecord(request: SubmitDataRecord.Request, context: StatusOnlyCallContext) -> EventLoopFuture<SubmitDataRecord.Response>
    
    func submitDataRecords(request: SubmitDataRecords.Request, context: StatusOnlyCallContext) -> EventLoopFuture<SubmitDataRecords.Response>
    
    func retrieveKNextDataRecords(request: RetrieveKNextDataRecords.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveKNextDataRecords.Response>
    
    func retrieveFilteredDataRecords(request: RetrieveFilteredDataRecords.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveFilteredDataRecords.Response>
    
    func downloadDumpfile(request: DownloadDumpfile.Request, context: StatusOnlyCallContext) -> EventLoopFuture<DownloadDumpfile.Response>
    
    /// statistics module
    func submitHeartbeat(request: SubmitHeartbeat.Request, context: StatusOnlyCallContext) -> EventLoopFuture<SubmitHeartbeat.Response>
    
    /// communication management module
    func submitDirectMessage(request: SubmitDirectMessage.Request, context: StatusOnlyCallContext) -> EventLoopFuture<SubmitDirectMessage.Response>
    
    func retrieveUnreadDirectMessages(request: RetrieveUnreadDirectMessages.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveUnreadDirectMessages.Response>
    
    func retrieveUnreadNotifications(request: RetrieveUnreadNotifications.Request, context: StatusOnlyCallContext) -> EventLoopFuture<RetrieveUnreadNotifications.Response>
}

extension ETServiceProvider {
    internal var serviceName: Substring { return "ETService" }
    
    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    internal func handleMethod(
        _ methodName: Substring,
        callHandlerContext: CallHandlerContext
    ) -> GRPCCallHandler? {
        switch methodName {
        case "loginWithGoogle":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeloginWithGoogleInterceptors() ?? []
            ) { context in
                return { request in
                    self.loginWithGoogle(request: request, context: context)
                }
            }
            
        case "loginDashboard":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeloginDashboardInterceptors() ?? []
            ) { context in
                return { request in
                    self.loginDashboard(request: request, context: context)
                }
            }
            
        case "bindUserToCampaign":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makebindUserToCampaignInterceptors() ?? []
            ) { context in
                return { request in
                    self.bindUserToCampaign(request: request, context: context)
                }
            }
            
        case "retrieveParticipants":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveParticipantsInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveParticipants(request: request, context: context)
                }
            }
            
        case "retrieveParticipantStats":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveParticipantStatsInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveParticipantStats(request: request, context: context)
                }
            }
            
        case "registerCampaign":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeregisterCampaignInterceptors() ?? []
            ) { context in
                return { request in
                    self.registerCampaign(request: request, context: context)
                }
            }
            
        case "deleteCampaign":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makedeleteCampaignInterceptors() ?? []
            ) { context in
                return { request in
                    self.deleteCampaign(request: request, context: context)
                }
            }
            
        case "retrieveCampaigns":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveCampaignsInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveCampaigns(request: request, context: context)
                }
            }
            
        case "retrieveCampaign":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveCampaignInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveCampaign(request: request, context: context)
                }
            }
            
        case "bindDataSource":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makebindDataSourceInterceptors() ?? []
            ) { context in
                return { request in
                    self.bindDataSource(request: request, context: context)
                }
            }
            
        case "retrieveDataSources":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveDataSourcesInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveDataSources(request: request, context: context)
                }
            }
            
        case "submitDataRecord":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makesubmitDataRecordInterceptors() ?? []
            ) { context in
                return { request in
                    self.submitDataRecord(request: request, context: context)
                }
            }
            
        case "submitDataRecords":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makesubmitDataRecordsInterceptors() ?? []
            ) { context in
                return { request in
                    self.submitDataRecords(request: request, context: context)
                }
            }
            
        case "retrieveKNextDataRecords":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveKNextDataRecordsInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveKNextDataRecords(request: request, context: context)
                }
            }
            
        case "retrieveFilteredDataRecords":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveFilteredDataRecordsInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveFilteredDataRecords(request: request, context: context)
                }
            }
            
        case "downloadDumpfile":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makedownloadDumpfileInterceptors() ?? []
            ) { context in
                return { request in
                    self.downloadDumpfile(request: request, context: context)
                }
            }
            
        case "submitHeartbeat":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makesubmitHeartbeatInterceptors() ?? []
            ) { context in
                return { request in
                    self.submitHeartbeat(request: request, context: context)
                }
            }
            
        case "submitDirectMessage":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makesubmitDirectMessageInterceptors() ?? []
            ) { context in
                return { request in
                    self.submitDirectMessage(request: request, context: context)
                }
            }
            
        case "retrieveUnreadDirectMessages":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveUnreadDirectMessagesInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveUnreadDirectMessages(request: request, context: context)
                }
            }
            
        case "retrieveUnreadNotifications":
            return CallHandlerFactory.makeUnary(
                callHandlerContext: callHandlerContext,
                interceptors: self.interceptors?.makeretrieveUnreadNotificationsInterceptors() ?? []
            ) { context in
                return { request in
                    self.retrieveUnreadNotifications(request: request, context: context)
                }
            }
            
        default:
            return nil
        }
    }
}

internal protocol ETServiceServerInterceptorFactoryProtocol {
    
    /// - Returns: Interceptors to use when handling 'loginWithGoogle'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeloginWithGoogleInterceptors() -> [ServerInterceptor<LoginWithGoogle.Request, LoginWithGoogle.Response>]
    
    /// - Returns: Interceptors to use when handling 'loginDashboard'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeloginDashboardInterceptors() -> [ServerInterceptor<LoginDashboard.Request, LoginDashboard.Response>]
    
    /// - Returns: Interceptors to use when handling 'bindUserToCampaign'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makebindUserToCampaignInterceptors() -> [ServerInterceptor<BindUserToCampaign.Request, BindUserToCampaign.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveParticipants'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveParticipantsInterceptors() -> [ServerInterceptor<RetrieveParticipants.Request, RetrieveParticipants.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveParticipantStats'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveParticipantStatsInterceptors() -> [ServerInterceptor<RetrieveParticipantStats.Request, RetrieveParticipantStats.Response>]
    
    /// - Returns: Interceptors to use when handling 'registerCampaign'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeregisterCampaignInterceptors() -> [ServerInterceptor<RegisterCampaign.Request, RegisterCampaign.Response>]
    
    /// - Returns: Interceptors to use when handling 'deleteCampaign'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makedeleteCampaignInterceptors() -> [ServerInterceptor<DeleteCampaign.Request, DeleteCampaign.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveCampaigns'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveCampaignsInterceptors() -> [ServerInterceptor<RetrieveCampaigns.Request, RetrieveCampaigns.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveCampaign'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveCampaignInterceptors() -> [ServerInterceptor<RetrieveCampaign.Request, RetrieveCampaign.Response>]
    
    /// - Returns: Interceptors to use when handling 'bindDataSource'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makebindDataSourceInterceptors() -> [ServerInterceptor<BindDataSource.Request, BindDataSource.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveDataSources'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveDataSourcesInterceptors() -> [ServerInterceptor<RetrieveDataSources.Request, RetrieveDataSources.Response>]
    
    /// - Returns: Interceptors to use when handling 'submitDataRecord'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makesubmitDataRecordInterceptors() -> [ServerInterceptor<SubmitDataRecord.Request, SubmitDataRecord.Response>]
    
    /// - Returns: Interceptors to use when handling 'submitDataRecords'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makesubmitDataRecordsInterceptors() -> [ServerInterceptor<SubmitDataRecords.Request, SubmitDataRecords.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveKNextDataRecords'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveKNextDataRecordsInterceptors() -> [ServerInterceptor<RetrieveKNextDataRecords.Request, RetrieveKNextDataRecords.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveFilteredDataRecords'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveFilteredDataRecordsInterceptors() -> [ServerInterceptor<RetrieveFilteredDataRecords.Request, RetrieveFilteredDataRecords.Response>]
    
    /// - Returns: Interceptors to use when handling 'downloadDumpfile'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makedownloadDumpfileInterceptors() -> [ServerInterceptor<DownloadDumpfile.Request, DownloadDumpfile.Response>]
    
    /// - Returns: Interceptors to use when handling 'submitHeartbeat'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makesubmitHeartbeatInterceptors() -> [ServerInterceptor<SubmitHeartbeat.Request, SubmitHeartbeat.Response>]
    
    /// - Returns: Interceptors to use when handling 'submitDirectMessage'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makesubmitDirectMessageInterceptors() -> [ServerInterceptor<SubmitDirectMessage.Request, SubmitDirectMessage.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveUnreadDirectMessages'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveUnreadDirectMessagesInterceptors() -> [ServerInterceptor<RetrieveUnreadDirectMessages.Request, RetrieveUnreadDirectMessages.Response>]
    
    /// - Returns: Interceptors to use when handling 'retrieveUnreadNotifications'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeretrieveUnreadNotificationsInterceptors() -> [ServerInterceptor<RetrieveUnreadNotifications.Request, RetrieveUnreadNotifications.Response>]
}
